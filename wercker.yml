#Use OpenJDK base docker image from dockerhub and open the application port on the docker container
box:
  id: openjdk:8
  ports:
    - $PORT

#Build our application using Maven, just as we always have
build:
  steps:
    - install-packages:
        packages: maven
    - script:
        name: maven build
        code: mvn clean assembly:assembly

#Push the docker image with our built and tested application to Docker Hub - version Oracle OCI
push-release:
  steps:
    - internal/docker-push:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: $DOCKER_REPO
        registry: https://fra.ocir.io/v2
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        working-dir: /pipeline/source
        ports: "8080"
        # env: PORT=$PORT -- by GCC
        cmd: sh target/bin/start
        
        #Deploy our container from the Docker Hub to Kubernetes
deploy-to-cluster:
    box:
        id: alpine
        cmd: /bin/sh
    steps:

    - bash-template

    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes.yml

        # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing - by GCC ver 2
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f kubernetes.yml
